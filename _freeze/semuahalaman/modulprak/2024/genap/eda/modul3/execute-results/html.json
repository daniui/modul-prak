{
  "hash": "c820150230d94164be712d95a6e11b58",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Pertemuan 3 : Simple Data Visualization (matplotlib)\"\nimage: static\\images\\eda_py_img0.png\ndescription: \"Data visualization in python using matplotlib (pyplot)\"\ndate: 04/23/2024\npage-navigation: true\njupyter: python3\nformat: html\n---\n\nKembali ke [EDA](./eda2024genap.qmd)\n\n# Matplotlib (Pyplot)\n\n<div style='text-align: justify;'>\nMatplotlib adalah library yang digunakan untuk visualisasi data. Hasil visualisasi data matplotllib menyerupai hasil visualisasi pada bahasa pemrograman matlab. Library ini bukanlah cara yang paling mudah untuk menghasilkan visualisasi data, tetapi visualisasi yang dihasilkan fleksibel dan dapat digunakan untuk banyak sekali kasus.\n</div>\n\n___\n\n<div style='text-align: justify;'>\n[Download dataset](https://drive.google.com/drive/folders/1Rz53jj0SLIB0lF6MEwY34lx8oBkEyy8-?usp=sharing)\n</div>\n\n::: {#9ee3365b .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Import Dataset\ndf = pd.read_csv('https://raw.githubusercontent.com/farhanage/dataset-for-study/main/insurance.csv')\n\n# Cek 5 observasi pertama\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cd530bc6 .cell execution_count=2}\n``` {.python .cell-code}\n# melihat informasi mengenai tiap variabel\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1338 entries, 0 to 1337\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   age       1338 non-null   int64  \n 1   sex       1338 non-null   object \n 2   bmi       1338 non-null   float64\n 3   children  1338 non-null   int64  \n 4   smoker    1338 non-null   object \n 5   region    1338 non-null   object \n 6   charges   1338 non-null   float64\ndtypes: float64(2), int64(2), object(3)\nmemory usage: 73.3+ KB\n```\n:::\n:::\n\n\n::: {#1139e335 .cell execution_count=3}\n``` {.python .cell-code}\n# statistik deskritif semua variabel numerik\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n      <td>1338.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>39.207025</td>\n      <td>30.663397</td>\n      <td>1.094918</td>\n      <td>13270.422265</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>14.049960</td>\n      <td>6.098187</td>\n      <td>1.205493</td>\n      <td>12110.011237</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>18.000000</td>\n      <td>15.960000</td>\n      <td>0.000000</td>\n      <td>1121.873900</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>27.000000</td>\n      <td>26.296250</td>\n      <td>0.000000</td>\n      <td>4740.287150</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>39.000000</td>\n      <td>30.400000</td>\n      <td>1.000000</td>\n      <td>9382.033000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>51.000000</td>\n      <td>34.693750</td>\n      <td>2.000000</td>\n      <td>16639.912515</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>64.000000</td>\n      <td>53.130000</td>\n      <td>5.000000</td>\n      <td>63770.428010</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Box Plot\n\n::: {#eef5e568 .cell execution_count=4}\n``` {.python .cell-code}\n# Box Plot variabel `age`\nplt.boxplot(x='age', data=df)\n\n# Menambahkan Judul Plot\nplt.title(\"Box Plot\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('Age')\nplt.ylabel('Value')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-5-output-1.png){width=585 height=449}\n:::\n:::\n\n\n::: {#39a476b1 .cell execution_count=5}\n``` {.python .cell-code}\n# Box Plot variabel `bmi`\nplt.boxplot(x='bmi', data=df)\n\n# Menambahkan Judul Plot\nplt.title(\"Box Plot\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('bmi')\nplt.ylabel('Value')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-6-output-1.png){width=585 height=449}\n:::\n:::\n\n\n:::{.callout-note}\n\n<div style='text-align: justify;'>\nSeperti halnya penggunaan syntax `?` pada bahasa pemrograman R, kita dapat mengakses dokumentasi suatu fungsi dalam suatu modul pada python dengan menggunakan function `help()`\n</div>\n\n::: {#e7ae20ad .cell execution_count=6}\n``` {.python .cell-code}\n# Melihat dokumentasi mengenai function plt.boxplot()\nhelp(plt.boxplot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```````````\nHelp on function boxplot in module matplotlib.pyplot:\n\nboxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None, capwidths=None, *, data=None)\n    Draw a box and whisker plot.\n    \n    The box extends from the first quartile (Q1) to the third\n    quartile (Q3) of the data, with a line at the median.  The\n    whiskers extend from the box by 1.5x the inter-quartile range\n    (IQR).  Flier points are those past the end of the whiskers.\n    See https://en.wikipedia.org/wiki/Box_plot for reference.\n    \n    .. code-block:: none\n    \n              Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                           |-----:-----|\n           o      |--------|     :     |--------|    o  o\n                           |-----:-----|\n         flier             <----------->            fliers\n                                IQR\n    \n    \n    Parameters\n    ----------\n    x : Array or a sequence of vectors.\n        The input data.  If a 2D array, a boxplot is drawn for each column\n        in *x*.  If a sequence of 1D arrays, a boxplot is drawn for each\n        array in *x*.\n    \n    notch : bool, default: False\n        Whether to draw a notched boxplot (`True`), or a rectangular\n        boxplot (`False`).  The notches represent the confidence interval\n        (CI) around the median.  The documentation for *bootstrap*\n        describes how the locations of the notches are computed by\n        default, but their locations may also be overridden by setting the\n        *conf_intervals* parameter.\n    \n        .. note::\n    \n            In cases where the values of the CI are less than the\n            lower quartile or greater than the upper quartile, the\n            notches will extend beyond the box, giving it a\n            distinctive \"flipped\" appearance. This is expected\n            behavior and consistent with other statistical\n            visualization packages.\n    \n    sym : str, optional\n        The default symbol for flier points.  An empty string ('') hides\n        the fliers.  If `None`, then the fliers default to 'b+'.  More\n        control is provided by the *flierprops* parameter.\n    \n    vert : bool, default: True\n        If `True`, draws vertical boxes.\n        If `False`, draw horizontal boxes.\n    \n    whis : float or (float, float), default: 1.5\n        The position of the whiskers.\n    \n        If a float, the lower whisker is at the lowest datum above\n        ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n        below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n        third quartiles.  The default value of ``whis = 1.5`` corresponds\n        to Tukey's original definition of boxplots.\n    \n        If a pair of floats, they indicate the percentiles at which to\n        draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n        (0, 100) results in whiskers covering the whole range of the data.\n    \n        In the edge case where ``Q1 == Q3``, *whis* is automatically set\n        to (0, 100) (cover the whole range of the data) if *autorange* is\n        True.\n    \n        Beyond the whiskers, data are considered outliers and are plotted\n        as individual points.\n    \n    bootstrap : int, optional\n        Specifies whether to bootstrap the confidence intervals\n        around the median for notched boxplots. If *bootstrap* is\n        None, no bootstrapping is performed, and notches are\n        calculated using a Gaussian-based asymptotic approximation\n        (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n        Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n        the number of times to bootstrap the median to determine its\n        95% confidence intervals. Values between 1000 and 10000 are\n        recommended.\n    \n    usermedians : 1D array-like, optional\n        A 1D array-like of length ``len(x)``.  Each entry that is not\n        `None` forces the value of the median for the corresponding\n        dataset.  For entries that are `None`, the medians are computed\n        by Matplotlib as normal.\n    \n    conf_intervals : array-like, optional\n        A 2D array-like of shape ``(len(x), 2)``.  Each entry that is not\n        None forces the location of the corresponding notch (which is\n        only drawn if *notch* is `True`).  For entries that are `None`,\n        the notches are computed by the method specified by the other\n        parameters (e.g., *bootstrap*).\n    \n    positions : array-like, optional\n        The positions of the boxes. The ticks and limits are\n        automatically set to match the positions. Defaults to\n        ``range(1, N+1)`` where N is the number of boxes to be drawn.\n    \n    widths : float or array-like\n        The widths of the boxes.  The default is 0.5, or ``0.15*(distance\n        between extreme positions)``, if that is smaller.\n    \n    patch_artist : bool, default: False\n        If `False` produces boxes with the Line2D artist. Otherwise,\n        boxes are drawn with Patch artists.\n    \n    labels : sequence, optional\n        Labels for each dataset (one per dataset).\n    \n    manage_ticks : bool, default: True\n        If True, the tick locations and labels will be adjusted to match\n        the boxplot positions.\n    \n    autorange : bool, default: False\n        When `True` and the data are distributed such that the 25th and\n        75th percentiles are equal, *whis* is set to (0, 100) such\n        that the whisker ends are at the minimum and maximum of the data.\n    \n    meanline : bool, default: False\n        If `True` (and *showmeans* is `True`), will try to render the\n        mean as a line spanning the full width of the box according to\n        *meanprops* (see below).  Not recommended if *shownotches* is also\n        True.  Otherwise, means will be shown as points.\n    \n    zorder : float, default: ``Line2D.zorder = 2``\n        The zorder of the boxplot.\n    \n    Returns\n    -------\n    dict\n      A dictionary mapping each component of the boxplot to a list\n      of the `.Line2D` instances created. That dictionary has the\n      following keys (assuming vertical boxplots):\n    \n      - ``boxes``: the main body of the boxplot showing the\n        quartiles and the median's confidence intervals if\n        enabled.\n    \n      - ``medians``: horizontal lines at the median of each box.\n    \n      - ``whiskers``: the vertical lines extending to the most\n        extreme, non-outlier data points.\n    \n      - ``caps``: the horizontal lines at the ends of the\n        whiskers.\n    \n      - ``fliers``: points representing data that extend beyond\n        the whiskers (fliers).\n    \n      - ``means``: points or lines representing the means.\n    \n    Other Parameters\n    ----------------\n    showcaps : bool, default: True\n        Show the caps on the ends of whiskers.\n    showbox : bool, default: True\n        Show the central box.\n    showfliers : bool, default: True\n        Show the outliers beyond the caps.\n    showmeans : bool, default: False\n        Show the arithmetic means.\n    capprops : dict, default: None\n        The style of the caps.\n    capwidths : float or array, default: None\n        The widths of the caps.\n    boxprops : dict, default: None\n        The style of the box.\n    whiskerprops : dict, default: None\n        The style of the whiskers.\n    flierprops : dict, default: None\n        The style of the fliers.\n    medianprops : dict, default: None\n        The style of the median.\n    meanprops : dict, default: None\n        The style of the mean.\n    data : indexable object, optional\n        If given, all parameters also accept a string ``s``, which is\n        interpreted as ``data[s]`` (unless this raises an exception).\n    \n    See Also\n    --------\n    violinplot : Draw an estimate of the probability density function.\n\n```````````\n:::\n:::\n\n\n:::\n\n## Histogram\n\n::: {#4188232d .cell execution_count=7}\n``` {.python .cell-code}\n# Histogram variabel `bmi`\nplt.hist(x='bmi', data=df)\n\n# Menambahkan Judul Plot\nplt.title(\"Histogram\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('bmi')\nplt.ylabel('Count')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-8-output-1.png){width=593 height=449}\n:::\n:::\n\n\n## Bar Chart\n\n::: {#b38f8f39 .cell execution_count=8}\n``` {.python .cell-code}\n# Hitung banyaknya responden dari masing-masing gender\ndf['sex'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nsex\nmale      676\nfemale    662\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#3b7733c6 .cell execution_count=9}\n``` {.python .cell-code}\n# Bar chart jumlah tiap jenis kelamin\ndf['sex'].value_counts().plot(kind='bar')\n\n# Menambahkan Judul Plot\nplt.title(\"Bar Chart\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('sex')\nplt.ylabel('count')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-10-output-1.png){width=593 height=482}\n:::\n:::\n\n\n## Horizontal Bar Chart\n\n::: {#7405bad7 .cell execution_count=10}\n``` {.python .cell-code}\n# Horizontal Bar chart jumlah tiap jenis kelamin\ndf['sex'].value_counts().plot(kind='barh')\n\n# Menambahkan Judul Plot\nplt.title(\"Bar Chart\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('count')\nplt.ylabel('sex')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-11-output-1.png){width=619 height=449}\n:::\n:::\n\n\n## Pie Chart\n\n::: {#e37c39de .cell execution_count=11}\n``` {.python .cell-code}\n# Pie chart persentase sebaran region seluruh responden\ndf['region'].value_counts().plot(kind='pie', autopct='%1.1f%%')\n\n# Menambahkan Judul Plot\nplt.title(\"Pie Chart\")\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-12-output-1.png){width=407 height=409}\n:::\n:::\n\n\n## Scatter Plot\n\n::: {#dff2812a .cell execution_count=12}\n``` {.python .cell-code}\n# Scatter plot variabel `age` dan `charges`\ndf.plot(kind='scatter', x='age', y='charges')\n\n# Menambahkan Judul Plot\nplt.title(\"Scatter Plot `Age` vs `Charges`\")\n \n# Menambahkan label sumbu X dan Y\nplt.xlabel('Age')\nplt.ylabel('Charges')\n\n# Menunjukkan plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-13-output-1.png){width=610 height=450}\n:::\n:::\n\n\n___\n\n<div style='text-align: justify;'>\nUntuk plot lainnya, silakan telusuri dokumentasi dari library matplotlib yang dapat diakses pada link berikut : [Dokumentasi matplotlib.pyplot](https://matplotlib.org/stable/api/pyplot_summary.html)\n</div>\n\n# Subplots\n\n## Figure and Axes\n<div style='text-align: justify;'>\n\nPembuatan suatu plot menggunakan library matplotlib akan menghasilkan suatu ***figure*** yang memiliki beberapa komponen di dalamnya.\n\n![](static\\images\\anatomy of figures.png)\n\nBerikut cara membuat suatu figure menggunakan matplotlib\n</div>\n\n::: {#833060dc .cell execution_count=13}\n``` {.python .cell-code}\nfig = plt.figure()  # an empty figure with no Axes\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n<div style='text-align: justify;'>\nFigure kosong tidak dapat divisualisasikan. Untuk membuat suatu figure yang memiliki axes, gunakan function `plt.subplots()`\n</div>\n\n::: {#c4aefe9c .cell execution_count=14}\n``` {.python .cell-code}\nfig, ax = plt.subplots()  # a figure with a single Axes\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-15-output-1.png){width=581 height=416}\n:::\n:::\n\n\n<div style='text-align: justify;'>\nBagaimana jika kita ingin membuat gabungan dari beberapa Axes dalam 1 figure?\n\nfunction subplots menerima parameter jumlah baris dan jumlah kolom untuk membentuk suatu *grid* yang terdiri atas 1 atau lebih axes\n</div>\n\n::: {#302d8871 .cell execution_count=15}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 2)  # a figure with a 2x2 grid of Axes\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-16-output-1.png){width=581 height=416}\n:::\n:::\n\n\n::: {#09454d24 .cell execution_count=16}\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-17-output-1.png){width=581 height=459}\n:::\n:::\n\n\n<div style='text-align: justify;'>\nSelain dengan function subplots, ada juga function `subplot_mosaic` yang akan menghasilkan axes dengan ukuran yang lebih bervariasi.\n</div>\n\n::: {#39d7edc6 .cell execution_count=17}\n``` {.python .cell-code}\n# a figure with one axes on the left, and two on the right:\nfig, axs = plt.subplot_mosaic([['left', 'right_top'],\n                               ['left', 'right_bottom']])\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-18-output-1.png){width=581 height=416}\n:::\n:::\n\n\n::: {#5496fd24 .cell execution_count=18}\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-19-output-1.png){width=581 height=459}\n:::\n:::\n\n\n## Plots\n\n<div style='text-align: justify;'>\nUntuk menambahkan plot pada tiap axis, gunakan function-function plot pada axis dengan index yang bersesuaian.\n</div>\n\n::: {#ccfdb176 .cell execution_count=19}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 2, layout=\"constrained\")\n\naxs[0,0].hist(df['age'])\n\naxs[0,0].set_title('Variabel `Age`')\n\naxs[0,1].hist(df['bmi'])\n\naxs[0,1].set_title('Variabel `bmi`')\n\naxs[1,0].hist(df['children'])\n\naxs[1,0].set_title('Variabel `children`')\n\naxs[1,1].hist(df['charges'])\n\naxs[1,1].set_title('Variabel `charges`')\n\nfig.suptitle('Histogram Variabel Numerik')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](modul3_files/figure-html/cell-20-output-1.png){width=683 height=491}\n:::\n:::\n\n\n<div style='text-align: justify;'>\nLebih lanjut, silakan baca dokumentasi dari plt.subplot pada link berikut : [Dokumentasi plt.subplots](https://matplotlib.org/stable/users/explain/axes/axes_intro.html#creating-axes)\n</div>\n\n",
    "supporting": [
      "modul3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}